op system = SYS | SYSL | AUTDA | AUTDB | AUTIA | AUTIAVariante | AUTIB | AUTIBVariante | 
    PACDA | PACDB | PACGA | PACIA | PACIAVariante | PACIB | PACIBVariante |
    BFM | BIC | BICS | NOP |
    BRK | BTI | CLREX | DCPS1 | DCPS2 | DCPS3 | DRPS | ESB | GMI | HLT | HVC |
    MRS | MSR_register | SETF | SEV | SEVL | SMC | SVC | UDF | WFE | WFET | XPAC | XPACLRI |
    YIELD

op SYS(op1:u3, CRn:u4, CRm: u4, op2:u3, Rt:REG_INDEX)
    syntax = format("sys #%d, %d, %d, #%d, %s", op1, CRn, CRm, op2, get64Reg(Rt))
    image = format("1101010100001%3b%4b%4b%3b%s", op1, CRn, CRm, op2, Rt.image)
    action = {
        // integer sys_op1 = UInt(op1);
        // integer sys_op2 = UInt(op2);
        // integer sys_crn = UInt(CRn);
        // integer sys_crm = UInt(CRm);
        // AArch64.SysInstr(1, sys_op1, sys_crn, sys_crm, sys_op2, t);
    }

op SYSL(op1:u3, CRn:u4, CRm: u4, op2:u3, Rt:REG_INDEX)
    syntax = format("sysl %s, #%d, %d, %d, #%d", get64Reg(Rt), op1, CRn, CRm, op2)
    image = format("1 1 0 1 0 1 0 1 0 0 1 0 1%3b%4b%4b%3b%s", op1, CRn, CRm, op2, Rt.image)
    action = {
        // integer sys_op1 = UInt(op1);
        // integer sys_op2 = UInt(op2);
        // integer sys_crn = UInt(CRn);
        // integer sys_crm = UInt(CRm);
        // AArch64.SysInstr(1, sys_op1, sys_crn, sys_crm, sys_op2, t);
    }
    
op AUTDA(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("autd%sa %s,%s", if Z==1 && Rn == 31 then "z" else "" endif, get64Reg(Rd), if Z==0 then get64RegoSP(Rn) else "" endif)
    image = format("110110101100000100%1b110%s%s", Z, Rn.image, Rd.image)
    action = {
        // boolean source_is_sp = FALSE;
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // if !HavePACExt() then
        // UNDEFINED;
        // if Z == '0' then // AUTDA
        // if n == 31 then source_is_sp = TRUE;
        // else // AUTDZA
        // if n != 31 then UNDEFINED;
        // if HavePACExt() then
        // if source_is_sp then
        // X[d, 64] = AuthDA(X[d, 64], SP[], FALSE);
        // else
        // X[d, 64] = AuthDA(X[d, 64], X[n, 64], FALSE);
    }

op AUTDB(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("autd%sb %s, %s", if Z==1 && Rn == 31 then "z" else "" endif, get64Reg(Rd), if Z==0 then get64RegoSP(Rn) else "" endif)
    image = format("110110101100000100%1b111%s%s", Z, Rn.image, Rd.image)
    action = {
        // boolean source_is_sp = FALSE;
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // if !HavePACExt() then
        // UNDEFINED;
        // if Z == '0' then // AUTDB
        // if n == 31 then source_is_sp = TRUE;
        // else // AUTDZB
        // if n != 31 then UNDEFINED;
        // if HavePACExt() then
        // if source_is_sp then
        // X[d, 64] = AuthDB(X[d, 64], SP[], FALSE);
        // else
        // X[d, 64] = AuthDB(X[d, 64], X[n, 64], FALSE);
    }

op AUTIA(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("auti%sa %s,%s", if Z==1 && Rn == 31 then "z" else "" endif, get64Reg(Rd), if Z==0 then get64RegoSP(Rn) else "" endif)
    image = format("110110101100000100%1b100%s%s", Z, Rn.image, Rd.image)
    action = {
        // boolean source_is_sp = FALSE;
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // if !HavePACExt() then
        // UNDEFINED;
        // if Z == '0' then // AUTIA
        // if n == 31 then source_is_sp = TRUE;
        // else // AUTIZA
        // if n != 31 then UNDEFINED;
        // if HavePACExt() then
        // if source_is_sp then
        // X[d, 64] = AuthIA(X[d, 64], SP[], FALSE);
        // else
        // X[d, 64] = AuthIA(X[d, 64], X[n, 64], FALSE);
    }

macro getAuthVariante(CRm, op2) = \
    if CRm == 0 && op2 == 0 then "1716" \
    else if CRm == 1 && op2 == 1 then "sp" \
    else if CRm == 1 && op2 == 0 then "z" \
    else "??" \
    endif endif endif

op AUTIAVariante(CRm: u1, op2: u1) 
    syntax = format("autia%s", getAuthVariante(CRm, op2))
    image = format("1101010100000011001000%1b110%1b11111", CRm, op2)
    action = {
        // integer d;
        // integer n;
        // boolean source_is_sp = FALSE;
        // case CRm:op2 of
        // when '0011 100'
        // // AUTIAZ
        // d = 30;
        // n = 31;
        // when '0011 101'
        // // AUTIASP
        // d = 30;
        // source_is_sp = TRUE;
        // when '0001 100'
        // // AUTIA1716
        // d = 17;
        // n = 16;
        // when '0001 000' SEE "PACIA";
        // when '0001 010' SEE "PACIB";
        // when '0001 110' SEE "AUTIB";
        // when '0011 00x' SEE "PACIA";
        // when '0011 01x' SEE "PACIB";
        // when '0011 11x' SEE "AUTIB";
        // when '0000 111' SEE "XPACLRI";
        // otherwise SEE "HINT";
        // //then idem AUTIA
    }

op AUTIB(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("auti%sb %s,%s", if Z==1 & Rn == 31 then "z" else "" endif, get64Reg(Rd), if Z==0 then get64RegoSP(Rn) else "" endif)
    image = format("110110101100000100%1b101%s%s", Z, Rn.image, Rd.image)
    action = {
        // boolean source_is_sp = FALSE;
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // if !HavePACExt() then
        // UNDEFINED;
        // if Z == '0' then // AUTIB
        // if n == 31 then source_is_sp = TRUE;
        // else // AUTIZB
        // if n != 31 then UNDEFINED;
        // if HavePACExt() then
        // if source_is_sp then
        // X[d, 64] = AuthIB(X[d, 64], SP[], FALSE);
        // else
        // X[d, 64] = AuthIB(X[d, 64], X[n, 64], FALSE);
    }

op AUTIBVariante(CRm: u1, op2: u1) 
    syntax = format("autib%s", getAuthVariante(CRm, op2))
    image = format("1101010100000011001000%1b111%1b11111", CRm, op2)
    action = {
        // integer d;
        // integer n;
        // boolean source_is_sp = FALSE;
        // case CRm:op2 of
        // when '0011 110'
        // // AUTIBZ
        // d = 30;
        // n = 31;
        // when '0011 111'
        // // AUTIBSP
        // d = 30;
        // source_is_sp = TRUE;
        // when '0001 110'
        // // AUTIB1716
        // d = 17;
        // n = 16;
        // when '0001 000' SEE "PACIA";
        // when '0001 010' SEE "PACIB";
        // when '0001 100' SEE "AUTIA";
        // when '0011 00x' SEE "PACIA";
        // when '0011 01x' SEE "PACIB";
        // when '0011 10x' SEE "AUTIA";
        // when '0000 111' SEE "XPACLRI";
        // otherwise SEE "HINT";
        // //then idem AUTIB
    }

op PACDA(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = if Z == 1 && Rn == 31 then 
                format("pacdza %s", get64Reg(Rd)) 
            else 
                format("pacda %s, %s", get64Reg(Rd), get64RegoSP(Rn)) 
            endif
    image = format("1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 0 0 %1b 0 1 0 %s%s", Z, Rn, Rd)
    action = {
    }

op PACDB(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = if Z == 1 && Rn == 31 then 
                format("pacdzb %s", get64Reg(Rd)) 
            else 
                format("pacdb %s, %s", get64Reg(Rd), get64RegoSP(Rn)) 
            endif
    image = format("1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 0 0 %1b 0 1 1 %s%s", Z, Rn, Rd)
    action = {
    }

op PACGA(Rm:REG_INDEX, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("pacga %s, %s, %s", get64Reg(Rd), get64Reg(Rn), get64RegoSP(Rm))
    image = format("1 0 0 1 1 0 1 0 1 1 0 %s 0 0 1 1 0 0 %s%s", Rm.image, Rn.image, Rd.image)
    action = {
    }

op PACIA(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = if Z == 1 && Rn == 31 then 
                format("paciza %s", get64Reg(Rd)) 
            else 
                format("pacia %s, %s", get64Reg(Rd), get64RegoSP(Rn)) 
            endif
    image = format("1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 0 0 %1b 0 0 0 %s%s", Z, Rn, Rd)
    action = {
    }

op PACIAVariante(CRm:u1, op2:u1)
    syntax = format("pacia%s", getAuthVariante(CRm, op2))
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 %1b 1 0 0 %1b 1 1 1 1 1", CRm, op2)
    action = {}

op PACIB(Z:u1, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = if Z == 1 && Rn == 31 then 
                format("pacizb %s", get64Reg(Rd)) 
            else 
                format("pacib %s, %s", get64Reg(Rd), get64RegoSP(Rn)) 
            endif
    image = format("1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 0 0 %1b 0 0 1 %s%s", Z, Rn, Rd)
    action = {
    }

op PACIBVariante(CRm:u1, op2:u1)
    syntax = format("pacib%s", getAuthVariante(CRm, op2))
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 %1b 1 0 1 %1b 1 1 1 1 1", CRm, op2)
    action = {}

op BFM(sf:u1, N: u1, immr:u6, imms: u6, Rn: REG_INDEX, Rd: REG_INDEX)
    syntax = format("bfm %s, %s, #%d, #%d", get32o64Reg(sf, Rd), get32o64Reg(sf, Rn), immr, imms)
    image = format("%1b 0 1 1 0 0 1 1 0 %1b %6b %6b %s %s", sf, N, immr, imms, Rn.image, Rd.image)
    action = {
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // integer datasize = if sf == '1' then 64 else 32;
        // integer r;
        // bits(datasize) wmask;
        // bits(datasize) tmask;
        // if sf == '1' && N != '1' then UNDEFINED;
        // if sf == '0' && (N != '0' || immr<5> != '0' || imms<5> != '0') then UNDEFINED;
        // r = UInt(immr);
        // (wmask, tmask) = DecodeBitMasks(N, imms, immr, FALSE, datasize);
        // bits(datasize) dst = X[d, datasize];
        // bits(datasize) src = X[n, datasize];
        // // perform bitfield move on low bits
        // bits(datasize) bot = (dst AND NOT(wmask)) OR (ROR(src, r) AND wmask);
        // // combine extension bits and result bits
        // X[d, datasize] = (dst AND NOT(tmask)) OR (bot AND tmask);
    }

op BIC(sf:u1, sh:u2, Rm:REG_INDEX, imm6:u6,  Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("bic %s, %s, %s%s", get32o64Reg(sf,Rd), get32o64Reg(sf, Rn), get32o64Reg(sf,Rm), shiftlblV(sh,imm6))
    image = format("%1b0001010%2b1%s%6b%s%s", sf, sh, Rm.image, imm6, Rn.image, Rd.image)
    action = {
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // integer m = UInt(Rm);
        // integer datasize = if sf == '1' then 64 else 32;
        // if sf == '0' && imm6<5> == '1' then UNDEFINED;
        // ShiftType shift_type = DecodeShift(shift);
        // integer shift_amount = UInt(imm6);
        // bits(datasize) operand1 = X[n, datasize];
        // bits(datasize) operand2 = ShiftReg(m, shift_type, shift_amount, datasize);
        // bits(datasize) result;
        // operand2 = NOT(operand2);
        // result = operand1 AND operand2;
        // X[d, datasize] = result;
    }

op BICS(sf:u1, sh:u2, Rm:REG_INDEX, imm6:u6,  Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("bics %s, %s, %s%s", get32o64Reg(sf,Rd), get32o64Reg(sf, Rn), get32o64Reg(sf,Rm), shiftlblV(sh,imm6))
    image = format("%1b 1 1 0 1 0 1 0 %2b 1 %s %6b %s %s", sf, sh, Rm.image, imm6, Rn.image, Rd.image)
    action = {
        // integer d = UInt(Rd);
        // integer n = UInt(Rn);
        // integer m = UInt(Rm);
        // integer datasize = if sf == '1' then 64 else 32;
        // if sf == '0' && imm6<5> == '1' then UNDEFINED;
        // ShiftType shift_type = DecodeShift(shift);
        // integer shift_amount = UInt(imm6);
        // bits(datasize) operand1 = X[n, datasize];
        // bits(datasize) operand2 = ShiftReg(m, shift_type, shift_amount, datasize);
        // bits(datasize) result;
        // operand2 = NOT(operand2);
        // result = operand1 AND operand2;
        // PSTATE.<N,Z,C,V> = result<datasize-1>:IsZeroBit(result):'00';
        // X[d, datasize] = result;
    }

op BRK(imm16: u16)
    syntax = format("brk #%d", imm16)
    image = format("1 1 0 1 0 1 0 0 0 0 1 %16b 0 0 0 0 0", imm16)
    action = {
        //if HaveBTIExt() then
        //SetBTypeCompatible(TRUE);
        //AArch64.SoftwareBreakpoint(imm16);
    }

op BTI(op2:u3)
    syntax = format("bti %d", op2)
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 %3b 1 1 1 1 1", op2)
    action = {
        // SystemHintOp op;
        // if CRm:op2 == '0100 xx0' then
        // op = SystemHintOp_BTI;
        // // Check branch target compatibility between BTI instruction and PSTATE.BTYPE
        // SetBTypeCompatible(BTypeCompatible_BTI(op2<2:1>));
        // else
        // EndOfInstruction();
        // case op of
        // when SystemHintOp_YIELD
        // Hint_Yield();
        // when SystemHintOp_DGH
        // Hint_DGH();
        // when SystemHintOp_WFE
        // C6-1318
        // Copyright © 2013-2023 Arm Limited or its affiliates. All rights reserved.
        // Non-Confidential
        // ARM DDI 0487J.a
        // ID042523A64 Base Instruction Descriptions
        // C6.2 Alphabetical list of A64 base instructions
        // integer localtimeout = 1 << 64;
        // // No local timeout event is generated
        // Hint_WFE(localtimeout, WFxType_WFE);
        // when SystemHintOp_WFI
        // integer localtimeout = 1 << 64;
        // // No local timeout event is generated
        // Hint_WFI(localtimeout, WFxType_WFI);
        // when SystemHintOp_SEV
        // SendEvent();
        // when SystemHintOp_SEVL
        // SendEventLocal();
        // when SystemHintOp_ESB
        // if HaveTME() && TSTATE.depth > 0 then
        // FailTransaction(TMFailure_ERR, FALSE);
        // SynchronizeErrors();
        // AArch64.ESBOperation();
        // if PSTATE.EL IN {EL0, EL1} && EL2Enabled() then AArch64.vESBOperation();
        // TakeUnmaskedSErrorInterrupts();
        // when SystemHintOp_PSB
        // ProfilingSynchronizationBarrier();
        // when SystemHintOp_TSB
        // TraceSynchronizationBarrier();
        // when SystemHintOp_CSDB
        // ConsumptionOfSpeculativeDataBarrier();
        // when SystemHintOp_BTI
        // SetBTypeNext('00');
        // otherwise
    }

op CLREX(CRm: u4)
    syntax = format("clrex #%d", CRm)
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 1 %4b 0 1 0 1 1 1 1 1", CRm)
    action = {
        //ClearExclusiveLocal(ProcessorID());
    }

op DCPS1(imm16: u16)
    syntax = format("dcps1 {#%d}", imm16)
    image = format("1 1 0 1 0 1 0 0 1 0 1 %16b 0 0 0 0 1", imm16)
    action = {
    }
op DCPS2(imm16: u16)
    syntax = format("dcps2 {#%d}", imm16)
    image = format("1 1 0 1 0 1 0 0 1 0 1 %16b 0 0 0 1 0", imm16)
    action = {
    }
op DCPS3(imm16: u16)
    syntax = format("dcps3 {#%d}", imm16)
    image = format("1 1 0 1 0 1 0 0 1 0 1 %16b 0 0 0 1 1", imm16)
    action = {
    }

op DRPS()
    syntax = "drps"
    image = "1 1 0 1 0 1 1 0 1 0 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0"
    action = {
    }

op ESB()
    syntax = "esb"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1"
    action = {
    }

op EXTR(sf:u1, N:u1, Rm:REG_INDEX, imms:u6, Rn:REG_INDEX, Rd:REG_INDEX)
    syntax = format("extr %s, %s, %s, #%d", get32o64Reg(sf, Rd), get32o64Reg(sf, Rn), get32o64Reg(sf, Rm), imms)
    image = format("%1b 0 0 1 0 0 1 1 1 %1b 0 %s %6b %s %s", sf, N, Rm.image, imms, Rn.image, Rd.image)
    action = {
    }

op GMI(Xm:REG_INDEX, Xn:REG_INDEX, Xd:REG_INDEX)
    syntax = format("gmi %s, %s, %s", get64Reg(Xd), get64RegoSP(Xn), get64Reg(Xm))
    image = format("1 0 0 1 1 0 1 0 1 1 0 %s 0 0 0 1 0 1 %s %s", Xm.image, Xn.image, Xd.image)
    action = {
    }

//op HINT(CRm:u4, op2:u3)
//    syntax = format("hint #%d", CRm::op2)
//    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 %4b %3b 1 1 1 1 1", CRm, op2)
//    action = {
//    }

op HLT(imm16:u16)
    syntax = format("hlt #%d", imm16)
    image = format("1 1 0 1 0 1 0 0 0 1 0 %16b 0 0 0 0 0", imm16)
    action = {
    }
op HVC(imm16:u16)
    syntax = format("hvc #%d", imm16)
    image = format("1 1 0 1 0 1 0 0 0 0 0 %16b 0 0 0 1 0", imm16)
    action = {
    }

op IRG(Xm:REG_INDEX, Xn:REG_INDEX, Xd:REG_INDEX)
    syntax = format("irg %s, %s, %s", get64Reg(Xd), get64RegoSP(Xn), get64Reg(Xm))
    image = format("1 0 0 1 1 0 1 0 1 1 0 %s 0 0 0 1 0 0 %s%s", Xm.image, Xn.image, Xd.image)
    action = {
    }

op MRS(o0:u1, op1:u3, CRn:u4, CRm:u4, op2:u3, Rt:REG_INDEX)
    syntax = format("mrs %s, S_%d_%d_%d_%d_%d", get64Reg(Rt), o0, op1, CRn,CRm,op2)
    image = format("1 1 0 1 0 1 0 1 0 0 1 1 %1b %3b %4b %4b %3b %s", o0, op1, CRn, CRm, op2, Rt.image)
    action = {
    }

macro getPStateField(op1op2, CRm) = \
    if op1op2 == 27 then \
        if CRm > 7 then "UNDEFINED" else \
        if CRm > 5 then "PSTATEField_SVCRSMZA" else \
        if CRm > 3 then "PSTATEField_SVCRZA" else \
        "PSTATEField_SVCRSM" \
        endif endif endif \
    else \
    switch(op1op2) { \
        case 3: "PSTATEField_UAO" \
        case 4: "PSTATEField_PAN" \
        case 5: "PSTATEField_SP" \
        case 8: "PSTATEField_ALLINT" \
        case 25: "PSTATEField_SSBS" \
        case 26: "PSTATEField_DIT" \
        case 28: "PSTATEField_TCO" \
        case 30: "PSTATEField_DAIFSet" \
        case 31: "PSTATEField_DAIFClr" \
        default: "UNDEFINED"\
    } \
    endif

//ambiguous
op MSR_immediate(op1:u3, CRm:u4, op2:u3)
    syntax = format("msr %d, #%d", imm_concat(op1,op2,3),CRm)//getPStateField(imm_concat(op1,op2,3), CRm), CRm)
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 %3b 0 1 0 0 %4b %3b 1 1 1 1 1", op1, CRm, op2)
    action = {
    }

op MSR_register(o0:u1, op1:u3, CRn:u4, CRm:u4, op2:u3, Rt:REG_INDEX)
    syntax = format("msr , %s", get64Reg(Rt))
    image = format("1 1 0 1 0 1 0 1 0 0 0 1 %1b %3b %4b %4b %3b %s", o0, op1, CRn, CRm, op2, Rt.image)
    action = {
    }

op NOP()
    syntax = "nop"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 1"
    action = {
    }


op SETF(sf:u1, Rn:REG_INDEX)
    syntax = format("%s %s", if sf == 0 then "setf8" else "setf16" endif, get32Reg(Rn))
    image = format("0 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 %1b 0 0 1 0 %s 0 1 1 0 1", sf, Rn.image)
    action = {
    }

op SEV()
    syntax = "sev"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1"
    action = {
    }

op SEVL()
    syntax = "sev"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1"
    action = {
    }

op SMC(imm16:u16)
    syntax = format("smc #%d", imm16)
    image = format("1 1 0 1 0 1 0 0 0 0 0 %16b 0 0 0 1 1", imm16)
    action = {
    }

op SVC(imm16:u16)
    syntax = format("svc #%d", imm16)
    image = format("1 1 0 1 0 1 0 0 0 0 0 %16b 0 0 0 0 1", imm16)
    action = {
    }

op UDF(imm16:u16)
    syntax = format("udf #%d", imm16)
    image = format("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 %16b", imm16)
    action = {
    }

op WFE()
    syntax = "wfe"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 1 1 1 1 1"
    action = {
    }
op WFET(Rd:REG_INDEX)
    syntax = format("wfet %s", get64Reg(Rd))
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 %s", Rd.image)
    action = {
    }

op WFI()
    syntax = "wfi"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1"
    action = {
    }
op WFIT(Rd:REG_INDEX)
    syntax = format("wdit %s", get64Reg(Rd))
    image = format("1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 %s", Rd.image)
    action = {
    }

op XPAC(D:u1, Rd:REG_INDEX)
    syntax = format("xpac%s %s", if D==1 then "d" else "i" endif, get64Reg(Rd))
    image = format("1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 0 1 0 0 0 %1b 1 1 1 1 1 %s", D, Rd.image)
    action = {
    }

op XPACLRI()
    syntax = "xpaclri"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1"
    action = {
    }

op YIELD()
    syntax = "yield"
    image = "1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1"
    action = {
    }