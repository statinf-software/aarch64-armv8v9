macro calcul_condition(cond) = \
	switch (cond) { \
		case 0: ZFLAG == 1 \
		case 1: ZFLAG == 0 \
		case 2: CFLAG == 1 \
		case 3: CFLAG == 0 \
		case 4: NFLAG == 1 \
		case 5: NFLAG == 0 \
		case 6: VFLAG == 1 \
		case 7: VFLAG == 0 \
		case 8: CFLAG==1 && ZFLAG==0  \
		case 9: CFLAG==0 || ZFLAG==1 \
		case 10: ((NFLAG==1 && VFLAG==1) || (NFLAG==0 && VFLAG==0)) \
		case 11: ((NFLAG==1 && VFLAG==0) || (NFLAG==0 && VFLAG==1)) \
		case 12: ((NFLAG==1 && VFLAG==1) || (NFLAG==0 && VFLAG==0)) && ZFLAG==0 \
		case 13: ((NFLAG==1 && VFLAG==0) || (NFLAG==0 && VFLAG==1)) || ZFLAG==1 \
		case 14: 1 == 1 \
		case 15: 1 == 1 \
	} \


mode condition(cond: enum(0..14)) = calcul_condition(cond<3..0>)
	syntax = switch (cond<3..0>) {
		case 0: "eq"
		case 1: "ne"
		case 2: "cs"
		case 3: "cc"
		case 4: "mi"
		case 5: "pl"
		case 6: "vs"
		case 7: "vc"
		case 8: "hi"
		case 9: "ls"
		case 10: "ge"
		case 11: "lt"
		case 12: "gt"
		case 13: "le"
		case 14: "al"
		case 15: "nv"
	}
	image = format("%4b", cond)
	value = cond


mode full_condition(cond: u4) = calcul_condition(cond)
	syntax = switch (cond) {
		case 0: "eq"
		case 1: "ne"
		case 2: "cs"
		case 3: "cc"
		case 4: "mi"
		case 5: "pl"
		case 6: "vs"
		case 7: "vc"
		case 8: "hi"
		case 9: "ls"
		case 10: "ge"
		case 11: "lt"
		case 12: "gt"
		case 13: "le"
		case 14: "al"
		case 15: "nv"
	}
	image = format("%4b", cond)
	value = cond


macro ConditionHolds_aux(tmp) = \
	switch(tmp<3..1>) { \
		case 0b000: if (ZFLAG == 1) then 0b1 else 0b0 endif \
		case 0b001: if (CFLAG == 1) then 0b1 else 0b0 endif \
		case 0b010: if (NFLAG == 1) then 0b1 else 0b0 endif \
		case 0b011: if (VFLAG == 1) then 0b1 else 0b0 endif \
		case 0b100: if ((CFLAG == 1) && (ZFLAG == 0)) then 0b1 else 0b0 endif \
		case 0b101: if (NFLAG == VFLAG) then 0b1 else 0b0 endif \
		case 0b110: if ((NFLAG == VFLAG) && (ZFLAG == 0)) then 0b1 else 0b0 endif \
		case 0b111: 0b1 \
	};

macro ConditionHolds_aux2(tmp, 1stStageRes) = \
	if ((tmp != 0b1111) && (tmp<0..0> == 0b1)) then \
		!1stStageRes \
	else \
		1stStageRes \
	endif

macro ConditionHolds(tmp) = \
	result = ConditionHolds_aux(tmp);\
	result = ConditionHolds_aux2(tmp, result);