macro get64Reg(num) = format("x%s", num.syntax)
macro get32Reg(num) = format("w%s", num.syntax)

macro get32RegoSP(num) = \
    if num == 31 then \
            "wsp" \
    else  \
        get32Reg(num) \
    endif
macro get64RegoSP(num) = \
    if num == 31 then \
            "sp" \
    else  \
        get64Reg(num) \
    endif

macro get32RegoZR(num) = \
    if num == 31 then \
            "zr" \
    else  \
        get32Reg(num) \
    endif
macro get64RegoZR(num) = \
    if num == 31 then \
            "zr" \
    else  \
        get64Reg(num) \
    endif

macro get32o64RegoSP(sf, num) = \
    if sf == 1 then  \
        get64RegoSP(num)  \
    else  \
        get32RegoSP(num)  \
    endif

macro get32o64Reg(sf, num) = \
    if sf == 1 then  \
        get64Reg(num) \
    else  \
        get32Reg(num) \
    endif

macro get32o64RegoZR(sf, num) = \
    if sf == 1 then  \
        get64RegoZR(num)  \
    else  \
        get32RegoZR(num)  \
    endif

macro DecodeRegExtend(op) = \
    switch(op) { \
        case 0 : "UXTB" \
        case 1 : "UXTH" \
        case 2 : "UXTW" \
        case 3 : "UXTX" \
        case 4 : "SXTB" \
        case 5 : "SXTH" \
        case 6 : "SXTW" \
        case 7 : "SXTX" \
    }

macro shiftlbl(sh) = if sh != 0 then "shift" else "" endif

macro shiftlblV(sh,imm6) = if sh != 0 then format(", shift #%d", imm6) else "" endif

macro extend(option, imm3) = if imm3 != 0 then format(", %s #%d", DecodeRegExtend(option), imm3) else "" endif






























