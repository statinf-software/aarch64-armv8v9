//
// GLISS V2 -- ARM branch instructions
// Copyright (c) 2010, IRIT - UPS <casse@irit.fr>
//
// This file is part of GLISS2.
//
// GLISS2 is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// GLISS2 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GLISS2; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//
var imm64[1, card(64)]
var targetAddress[1, card(64)]
var result[1, card(1)]

// branches
macro BranchTo(addr) = NPC = (addr)

op branch = B | B_Cond | BC_Cond | BL | BLR | BLRAA | BLRAAZ | BLRAB | BLRABZ | 
			BR | BRAA | BRAAZ | BRAB | BRABZ

//CBNZ CBZ TBNZ TBZ RET

op B(signed_immed_26: IMM26)
	target = __IADDR + 8 + coerce(int(64), signed_immed_26)
	syntax = format("b %@", target)
	image = format("000101%s", signed_immed_26.image)
	action = {
		imm64 = SignExtend(signed_immed_26 :: 0b0, 64);
		targetAddress = Align(PC, 4) + imm64;
		BranchTo(targetAddress);
	}

op B_Cond(cond: full_condition, signed_immed_19: IMM19)
	target = __IADDR + 8 + coerce(int(64), signed_immed_19)
	syntax = format("b.%s %@", cond.syntax, target)
	image = format("01010100%s0%s", signed_immed_19.image, cond.image)
	action = {
		ConditionHolds(cond.value);
		if result then
			imm64 = SignExtend(signed_immed_19 :: 0b0, 64);
			targetAddress = Align(PC, 4) + imm64;
			BranchTo(targetAddress);
		endif;
	}

op BC_Cond(cond: full_condition, signed_immed_19: IMM19)
	target = __IADDR + 8 + coerce(int(64), signed_immed_19)
	syntax = format("bc.%s %@", cond.syntax, target)
	image = format("01010100%s1%s", signed_immed_19.image, cond.image)
	action = {
		ConditionHolds(cond.value);
		if result then
			imm64 = SignExtend(signed_immed_19 :: 0b0, 64);
			targetAddress = Align(PC, 4) + imm64;
			BranchTo(targetAddress);
		endif;
	}

op BL(signed_immed_26: IMM26)
	target = __IADDR + 8 + coerce(int(64), signed_immed_26)
	syntax = format("bl %@", target)
	image = format("100101%s", signed_immed_26.image)
	action = {
		imm64 = SignExtend(signed_immed_26 :: 0b0, 64);
		targetAddress = Align(PC, 4) + imm64;
		X[30] = Align(PC, 4);//write pc+4 into X[30]
		BranchTo(targetAddress);
	}

op BLR(rn: REG_INDEX)
	syntax = format("blr %s", rn.syntax)
	image = format("1101011000111111000000%s00000", rn.image)
	action = {
		imm64 = UInt64(X[rn]);
		targetAddress = Align(PC, 4) + imm64;
		X[30] = Align(PC, 4);//write pc+4 into X[30]
		// Value in BTypeNext will be used to set PSTATE.BTYPE
		// BTypeNext = '10';
		BranchTo(targetAddress);
	}

op BLRAA(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blraa %s,%s", rn.syntax, rm.syntax)
	image = format("1101011100111111000010%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BLRAAZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blraaz %s,%s", rn.syntax, rm.syntax)
	image = format("1101011000111111000010%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BLRAB(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blrab %s,%s", rn.syntax, rm.syntax)
	image = format("1101011100111111000011%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}
	
op BLRABZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blrabz %s,%s", rn.syntax, rm.syntax)
	image = format("1101011000111111000011%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
		//target = X[rn]
		//modifier = if (source_is_sp) then SP else X[m] endif;
		//if use_key_a then
		//	target = AuthIA(target, modifier, TRUE);
		//else
		//	target = AuthIB(target, modifier, TRUE);
		//X[30] = PC[] + 4;
		// Value in BTypeNext will be used to set PSTATE.BTYPE
		//BTypeNext = '10';
		//BranchTo(target);
	}

op BR(rn: REG_INDEX)
	syntax = format("br %s", rn.syntax)
	image = format("1101011000011111000000%s00000", rn.image)
	action = {
		targetAddress = UInt64(X[rn]);
		// Value in BTypeNext will be used to set PSTATE.BTYPE
		//if InGuardedPage then
		//	if n == 16 || n == 17 then
		//		BTypeNext = '01';
		//	else
		//		BTypeNext = '11';
		//else
		//	BTypeNext = '01';
		BranchTo(targetAddress);
	}

op BRAA(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("braa %s,%s", rn.syntax, rm.syntax)
	image = format("1101011100011111000010%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BRAAZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("braaz %s,%s", rn.syntax, rm.syntax)
	image = format("1101011000011111000010%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BRAB(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("brab %s,%s", rn.syntax, rm.syntax)
	image = format("1101011100011111000011%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BRABZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("brabz %s,%s", rn.syntax, rm.syntax)
	image = format("1101011000011111000011%s%s", rn.image, rm.image)
	action = {
//todo: deal with authentification stuffs
	}

op BRB(oper: UIMM3, rt: REG_INDEX)
	syntax = format("brb %s,%s", oper.syntax, rt.syntax)
	image = format("1101011000011111000011%s%s", oper.image, rt.image)
	action = {
//BRB <op>{, <Xt>} <=> SYS #1, C7, C2, #<op>{, <Xt>}
// op1 == '001' && CRn == '0111' && CRm == '0010' && SysOp('001','0111','0010',op2) == Sys_BRB
//AArch64.SysInstr(integer op0, integer op1, integer crn, integer crm, integer op2, integer t);
	}
