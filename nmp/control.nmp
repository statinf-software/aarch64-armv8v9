// branches
macro BranchTo(addr) = NPC = (addr)

//| BRB
op branch = B | B_Cond | BC_Cond | BL | BLR | BLRAA | BLRAAZ | BLRAB | BLRABZ | 
			BR | BRAA | BRAAZ | BRAB | BRABZ | 
			CBZ | CBNZ | ERET | ERETAA | ERETAB | RET | RETA

//CBNZ CBZ TBNZ TBZ RET

op B(signed_immed_26: IMM26)
	target = __IADDR + 8 + coerce(int(64), signed_immed_26)
	syntax = format("b %@", target)
	image = format("000101%s", signed_immed_26.image)
	action = {
		imm64 = SignExtend(signed_immed_26 :: 0b0, 64);
		targetAddress = Align(PC, 4) + imm64;
		BranchTo(targetAddress);
	}

op B_Cond(cond: full_condition, signed_immed_19: IMM19)
	target = __IADDR + 8 + coerce(int(64), signed_immed_19)
	syntax = format("b.%s %@", cond.syntax, target)
	image = format("01010100%s0%s", signed_immed_19.image, cond.image)
	action = {
		ConditionHolds(cond.value);
		if result then
			imm64 = SignExtend(signed_immed_19 :: 0b0, 64);
			targetAddress = Align(PC, 4) + imm64;
			BranchTo(targetAddress);
		endif;
	}

op BC_Cond(cond: full_condition, signed_immed_19: IMM19)
	target = __IADDR + 8 + coerce(int(64), signed_immed_19)
	syntax = format("bc.%s %@", cond.syntax, target)
	image = format("01010100%s1%s", signed_immed_19.image, cond.image)
	action = {
		ConditionHolds(cond.value);
		if result then
			imm64 = SignExtend(signed_immed_19 :: 0b0, 64);
			targetAddress = Align(PC, 4) + imm64;
			BranchTo(targetAddress);
		endif;
	}

op BL(signed_immed_26: IMM26)
	target = __IADDR + 8 + coerce(int(64), signed_immed_26)
	syntax = format("bl %@", target)
	image = format("100101%s", signed_immed_26.image)
	action = {
		imm64 = SignExtend(signed_immed_26 :: 0b0, 64);
		targetAddress = Align(PC, 4) + imm64;
		X[30] = Align(PC, 4);//write pc+4 into X[30]
		BranchTo(targetAddress);
	}

op BLR(rn: REG_INDEX)
	syntax = format("blr %s", get64RegoSP(rn))
	image = format("1101011000111111000000%s00000", rn.image)
	action = {
		imm64 = UInt64(X[rn]);
		targetAddress = Align(PC, 4) + imm64;
		X[30] = Align(PC, 4);//write pc+4 into X[30]
		// Value in BTypeNext will be used to set PSTATE.BTYPE
		// BTypeNext = '10';
		BranchTo(targetAddress);
	}

op BLRAA(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blraa X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011100111111000010%s%s", rn.image, rm.image)
	action = {
	}

op BLRAAZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blraaz X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011000111111000010%s%s", rn.image, rm.image)
	action = {
	}

op BLRAB(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blrab X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011100111111000011%s%s", rn.image, rm.image)
	action = {
	}
	
op BLRABZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("blrabz X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011000111111000011%s%s", rn.image, rm.image)
	action = {
	}

op BR(rn: REG_INDEX)
	syntax = format("br X%s", get64RegoSP(rn))
	image = format("1101011000011111000000%s00000", rn.image)
	action = {
		targetAddress = UInt64(X[rn]);
		// Value in BTypeNext will be used to set PSTATE.BTYPE
		//if InGuardedPage then
		//	if n == 16 || n == 17 then
		//		BTypeNext = '01';
		//	else
		//		BTypeNext = '11';
		//else
		//	BTypeNext = '01';
		BranchTo(targetAddress);
	}

op BRAA(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("braa X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011100011111000010%s%s", rn.image, rm.image)
	action = {
	}

op BRAAZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("braaz X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011000011111000010%s%s", rn.image, rm.image)
	action = {
	}

op BRAB(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("brab X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011100011111000011%s%s", rn.image, rm.image)
	action = {
	}

op BRABZ(rn: REG_INDEX, rm: REG_INDEX)
	syntax = format("brabz X%s,X%s", get64RegoSP(rn), get64RegoSP(rm))
	image = format("1101011000011111000011%s%s", rn.image, rm.image)
	action = {
	}

op CBNZ(sz:u1, imm19:u19, Rt:REG_INDEX)
    syntax = format("cbnz %s, %x", get32o64Reg(sz, Rt), imm19)
    image = format("%1b 0 1 1 0 1 0 1 %19b %s", sz, imm19, Rt.image)
    action = {
	//		integer t = UInt(Rt);
	//integer datasize = if sf == '1' then 64 else 32;
	//bits(64) offset = SignExtend(imm19:'00', 64);
	//bits(datasize) operand1 = X[t, datasize];
	//if IsZero(operand1) == FALSE then
	//BranchTo(PC[] + offset, BranchType_DIR, TRUE);
	//else
	//BranchNotTaken(BranchType_DIR, TRUE);
    }

op CBZ(sz:u1, imm19:u19, Rt:REG_INDEX)
    syntax = format("cbz %s, %x", get32o64Reg(sz, Rt), imm19)
    image = format("%1b 0 1 1 0 1 0 0 %19b %s", sz, imm19, Rt.image)
    action = {	
	// 		integer t = UInt(Rt);
	// integer datasize = if sf == '1' then 64 else 32;
	// bits(64) offset = SignExtend(imm19:'00', 64);
	// bits(datasize) operand1 = X[t, datasize];
	// if IsZero(operand1) == TRUE then
	// BranchTo(PC[] + offset, BranchType_DIR, TRUE);
	// else
	// BranchNotTaken(BranchType_DIR, TRUE);
    }

op ERET()
    syntax = "eret"
    image = "1 1 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0"
    action = {
    }
op ERETAA()
    syntax = "eretaa"
    image = "1 1 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1"
    action = {
    }
op ERETAB()
    syntax = "eretab"
    image = "1 1 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1"
    action = {
    }

op RET(Rn:REG_INDEX)
    syntax = format("ret %s", get64RegoZR(Rn))
    image = format("1 1 0 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 0 0 0 %s 00000", Rn.image)
    action = {
		targetAddress = if Rn == 31 then 
							UInt64(X[30])
						else 
							UInt64(X[Rn])
						endif;
		//BTypeNext = '00';
		BranchTo(targetAddress);
    }

op RETA(M: u1)
    syntax = format("%s", if M == 0 then "retaa" else "retab" endif)
    image = format("1 1 0 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 0 1 %1b 1 1 1 1 1 1 1 1 1 1", M)
    action = {
    }





























