///////////////////////////////////////////
// TYPES DEFINITIONS
///////////////////////////////////////////


// basic unsigned types
type u2048 = card(2048)
type u256 = card(256)
type u128 = card(128)
type u64 = card(64)
type u32 = card(32)
type u16 = card(16)
type u8  = card(8)
type u1  = card(1)

// basic signed types
type s128 = int(128)
type s64 = int(64)
type s32 = int(32)
type s26 = int(26)
type s24 = int(24)
type s19 = int(19)
type s16 = int(16)
type s11 = int(11)
type s8  = int(8)
type s1  = int(1)

// Miscellaneous bit-string types needed for instruction formats (binary images).
type u2    = card(2)
type u3    = card(3)
type u4    = card(4)
type u5    = card(5)
type u7    = card(7)
type u11   = card(11)
type u12   = card(12)
type u13   = card(13)
type u24   = card(24)

type address_t = int(64)
type doublefp = float(52, 12)
type singlefp = float(23, 9)
type halffp = float(6, 10)

// Macro types
mode IMM26(n: s26) = n
	syntax = format("%d", n << 2)
	image  = format("%26b", n)

mode IMM24(n: s24) = n
	syntax = format("%d", n << 2)
	image  = format("%24b", n)

mode IMM19(n: s19) = n
	syntax = format("%d", n << 2)
	image  = format("%19b", n)

mode UIMM3(n: u3) = n
	syntax = format("%d", n)
	image = format("%3b", n)

mode OFFSET_12(n: u12) = n
	syntax = format("#%d", n)
	image = format("%12b", n)

// Type Casting
macro UInt(v)			=	coerce(card(32), v)
macro UInt64(v)			=	coerce(card(64), v)
macro SInt(v)			=	coerce(int(32), v)

// value computation
macro Align(x, n)		=	((x) & ~(n - 1))
macro ZeroExtend(v, n) 	=	coerce(card(n), v)
macro SignExtend(s, n)  = coerce(int(n), s)
